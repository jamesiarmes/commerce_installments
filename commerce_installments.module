<?php

/**
 * @file
 * Module for Commerce Installments. Written by Commerce Guys, sponsored by All
 * players.
 */

/**
 * Implements hook_form_FORMID_alter() to change the Add to Cart button text.
 *
 * Note that this is not even necesary if VBO is used in the customer-facing
 * purchasing environment instead of using view rows with Add to cart forms.
 */
function commerce_installments_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  $line_item = $form_state['line_item'];
  // Assumes LANGUAGE_NONE for this project... Would not be appropriate in a
  // general solution.
  $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);
  if ($product->type == 'installment_payment') {
    // Change the submit button text to more appropriate "Pay now"
    $form['submit']['#value'] = t('Pay now');

    // Default the "amount to pay" line item field to the total amount.
    if (empty($form_state['values']['field_amount_to_pay'][LANGUAGE_NONE][0]['amount']['#default_value'])) {
      $form['line_item_fields']['field_amount_to_pay'][LANGUAGE_NONE][0]['amount']['#default_value'] = commerce_currency_amount_to_decimal($line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'], $line_item->commerce_unit_price[LANGUAGE_NONE][0]['currency_code']);
    }
  }
}

/**
 * Commerce installments field
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function commerce_installments_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'commerce_installments_payment' => array(
      'label' => t('Installment payment'),
      'description' => t('Used to create a payment schedule'),
      'default_widget' => 'commerce_installments_payment_text',
      'default_formatter' => 'commerce_installments_payment_text',
    ),
  );
}

/**
 * Implements hook_field_presave().
 */
function commerce_installments_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => &$item) {
    if ($item['commerce_installments_payment']['amount'] == 0) {
      unset($item['commerce_installments_payment']);
    }
    else {
      // Convert the due date into unixtime
      $item['due_date'] = mktime(0,0,0, $item['commerce_installments_payment']['due_date']['month'], $item['commerce_installments_payment']['due_date']['day'], $item['commerce_installments_payment']['due_date']['year']);
      // Convert the amount into an integer
      $item['amount'] = round($item['commerce_installments_payment']['amount'] * 100, 0);
    }
  }
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * If it doesn't validate, we add our own error notification to the
 * $errors parameter.
 *
 * @see commerce_installments_field_widget_error()
 */
function commerce_installments_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['commerce_installments_payment'])) {
// TODO: Add validation and error handeling //
      if (FALSE) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'commerce_installments_invalid',
          'message' => t('Add error message here'),
        );
      }
    }
  }
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function commerce_installments_field_is_empty($item, $field) {
// TODO: Add proper is_empty handleing)
  if ($item['commerce_installments_payment']['amount'] == 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see commerce_installments_field_formatter_view()
 */
function commerce_installments_field_formatter_info() {
  return array(
    // This formatter just displays text for now
    'commerce_installments_payment_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('commerce_installments_payment'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - commerce_installments_payment_text just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 *
 * @see commerce_installments_field_formatter_info()
 */
function commerce_installments_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'commerce_installments_payment_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'strong',
          '#value' => format_date($item['due_date'], 'short') . ' ' . $item['amount'],
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A temporary widget.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see commerce_installments_field_widget_form()
 */
function commerce_installments_field_widget_info() {
  return array(
    'commerce_installments_payment' => array(
      'label' => t('Installment Payment'),
      'field types' => array('commerce_installments_payment'),
    ),
  );
}

/**
 * Transforms date to an array expected by field
 */
function commerce_installments_date_transform($timestamp){
  $timestamp = intval($timestamp);
  $date_array = array(
    'year' => (int) date("Y", $timestamp),
    'month' => (int) date("m", $timestamp),
    'day' => (int) date("d", $timestamp),
  );

  return $date_array;
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 */
function commerce_installments_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $value = isset($items[$delta]['commerce_installments_payment']) ? $items[$delta]['commerce_installments_payment'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'commerce_installments_payment':

      $widget['due_date'] = array(
        '#type' => 'date',
        '#title' => t('Payment due date'),
        '#default_value' => isset($items[$delta]['due_date']) ? commerce_installments_date_transform($items[$delta]['due_date']) : commerce_installments_date_transform(strtotime('NOW')),
        '#description' => t('The due date for the installment payment.'),
      );
      $widget['amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Amount Due'),
        '#size' => 6,
        '#default_value' => !empty($items[$delta]['amount']) ? number_format(($items[$delta]['amount']/100), 2) : 0.00,
        '#description' => t('The amount due'),
      );
    break;
  }

  $element['commerce_installments_payment'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 */
function commerce_installments_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {

  }
}


/**
 * Rules Integration
 */
/**
 * Implements hook_rules_action_info().
 */
function commerce_installments_rules_action_info() {
  $actions['commerce_installments_action_create_installments'] = array(
    'label' => t('Create installments'),
    'group' => t('Commerce Installments'),
    'parameter' => array(
      'commerce_line_item' => array(
        'type' => 'commerce_line_item',
        'label' => t('Line item'),
        ),
      'commerce_order' => array(
        'type' => 'commerce_order',
        'label' => t('Commerce Order'),
      ),
    ),
  );
  $actions['commerce_installments_action_add_to_cart'] = array(
    'label' => t('Add a product to the cart'),
    'group' => t('Commerce Installments'),
    'parameter' => array(
      'product' => array(
        'type' => 'commerce_product',
        'label' => t('Product'),
        ),
    ),
  );

  return $actions;
}

/**
 * Action: Create installment products from a line item's product.
 *
 * @param $line_item
 *   The populated line item array.
 * @param $order
 *   The populated order array.
 */
function commerce_installments_action_create_installments($line_item, $order) {
  if (empty($line_item->data['commerce_installments']['processed'])) {

    // Iterate over all of the fields to gather a list of installment field names.
    $fields = array();
    foreach (field_info_fields() as $field_name => $field) {
      if ($field['type'] == 'commerce_installments_payment') {
        $fields[] = $field_name;
      }
    }

    $product = array_pop(entity_load('commerce_product', array($line_item->commerce_product['und'][0]['product_id'])));
    $account = user_load($order->uid);

    $base_values = array(
      'type' => 'installment_payment',
      'created' => time(),
      'changed' => time(),
      'original_order' =>  $order->order_number,
      'original_line_item' =>  $line_item->line_item_id,
      'original_product' => $product->product_id,
    );
    $base_extras = array(
      'uid' =>  $order->uid,
      'status' => 1,
    );

    // Check to see if the product has any installment fields.
    foreach ($fields as $field) {
      // If so, create an installment entity for each installment.
      if (!empty($product->$field)) {
        $installment_number = 0;
        foreach ($product->{$field}['und'] as $installment) {
          $installment_number++;
          $new_installment = $base_values + array(
            'price' =>  $installment['amount'],
            'amount_paid' => 0,
            'due_date' =>  $installment['due_date'],
          );

          $new_extras = $base_extras + array(
            // Sku unique by username + order + lineitem + payment#
            'sku' => 'Installment_' . $account->name . '_' . $order->order_id . '_' . $line_item->line_item_id . '_installment_' . $installment_number,
            'title' => t('Installment @installment for @title (user @name)', array('@installment' => $installment_number, '@name' => $account->name, '@title' => $line_item->line_item_label)),
          );
          $new_installment_product_id = commerce_installments_create_product('installment_payment', $new_installment, $new_extras);
        }
      }
    }
    // Mark the line item as processed, to prevent future processing.
    $line_item->data['commerce_installments']['processed'] = TRUE;
    commerce_line_item_save($line_item);
  }
}


/**
 * Rules Action: Add a product to the cart.
 *
 * Currently assumes that the line item type will be the default 'product'.
 *
 * @param $product
 *   The product to add.
 */
function commerce_installments_action_add_to_cart($product, $line_item_type) {
  // Create the new product line item of the same type.
  $line_item = commerce_product_line_item_new($product);

  // Process the unit price through Rules so it reflects the user's actual
  // purchase price.
  rules_invoke_event('commerce_product_calculate_sell_price', $line_item);

  // Only attempt an Add to Cart if the line item has a valid unit price.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  if (!is_null($line_item_wrapper->commerce_unit_price->value())) {
    // Add the product to the specified shopping cart.
    $new_line_item = commerce_cart_product_add(
      $GLOBALS['user']->uid,
      $line_item,
      FALSE
    );

    drupal_set_message(t('%title added to <a href="!cart-url">your cart</a>.', array('%title' => $product->title, '!cart-url' => url('cart'))));
  }
  else {
    drupal_set_message(t('%title could not be added to your cart.', array('%title' => $product->title)), 'error');
  }
}

/**
 * Create a product programmatically.
 *
 * This is stolen shamelessly from commerce_bpc. However, I'm not comfortable
 * with the field saving using form api. Seems quite odd.
 *
 * @param $product_type
 *   (string) The name of the product type for which products should be created.
 * @param $values
 *   Keyed array with
 *   - 'price' => actual amount owed on this installment; decimal text like '1.50'
 *   - 'amount_paid' => price amount already paid as a decimal text like '1.50';
 *   - 'original_order' => order id of the original order
 *   - 'original_line_item' => line item id of original line item
 *   - 'original_product => product id of the original product from which the
 *     new product is being created.
 * @param $extras
 *   An array for the values of  'extra fields' defined for the product type
 *   entity, or patterns for these. Recognized keys are:
 *   - status
 *   - uid
 *   - sku
 *   - title
 *   Note that the values do NOT come in the form of complex arrays (as they
 *   are not translatable, and can only have single values).
 * @return
 *   The ID of the created product.
 */
function commerce_installments_create_product($product_type, $values, $extras) {
  $form_state = array();
  $form_state['values'] = $values;
  $form = array();
  $form['#parents'] = array();

  // Generate a new product object
  $new_product = commerce_product_new($product_type);

  $new_product->status = $extras['status'];
  $new_product->uid = $extras['uid'];

  $new_product->sku = $extras['sku'];
  $new_product->title = $extras['title'];
  $new_product->created = $new_product->changed = time();

  // field_original_order[und][0][target_id]
  $order = array(LANGUAGE_NONE => array(0 => array('target_id' => $values['original_order'])));
  $form_state['values']['field_original_order'] = $order;

  // field_original_line_item[und][0][target_id]
  $line_item = array(LANGUAGE_NONE => array(0 => array('target_id' => $values['original_line_item'])));
  $form_state['values']['field_original_line_item'] = $line_item;

  $product = array(LANGUAGE_NONE => array(0 => array('target_id' => $values['original_product'])));
  $form_state['values']['field_original_product'] = $product;

  //commerce_price[und][0][amount]
  $price = array(LANGUAGE_NONE => array(0 => array(
    'amount' => $values['price'],
    'currency_code' => commerce_default_currency(),
  )));
  $form_state['values']['commerce_price'] = $price;

  // field_due_date[und][0][value][date]
  $due_date = array(LANGUAGE_NONE => array(0 => array('date' => $values['due_date'])));
  $form_state['values']['field_due_date'] = $due_date;

  // Notify field widgets to save their field data
  field_attach_submit('commerce_product', $new_product, $form, $form_state);

  commerce_product_save($new_product);
  return $new_product->product_id;
}

